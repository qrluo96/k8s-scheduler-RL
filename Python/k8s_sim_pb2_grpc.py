# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import k8s_sim_pb2 as k8s__sim__pb2


class simRPCStub(object):
  """Interface exported by the server.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RecordMetrics = channel.unary_unary(
        '/simRPC.simRPC/RecordMetrics',
        request_serializer=k8s__sim__pb2.Metrics.SerializeToString,
        response_deserializer=k8s__sim__pb2.Result.FromString,
        )
    self.RecordFormattedMetrics = channel.unary_unary(
        '/simRPC.simRPC/RecordFormattedMetrics',
        request_serializer=k8s__sim__pb2.FormattedMetrics.SerializeToString,
        response_deserializer=k8s__sim__pb2.Result.FromString,
        )


class simRPCServicer(object):
  """Interface exported by the server.
  """

  def RecordMetrics(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RecordFormattedMetrics(self, request, context):
    """A client-to-server streaming RPC.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_simRPCServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RecordMetrics': grpc.unary_unary_rpc_method_handler(
          servicer.RecordMetrics,
          request_deserializer=k8s__sim__pb2.Metrics.FromString,
          response_serializer=k8s__sim__pb2.Result.SerializeToString,
      ),
      'RecordFormattedMetrics': grpc.unary_unary_rpc_method_handler(
          servicer.RecordFormattedMetrics,
          request_deserializer=k8s__sim__pb2.FormattedMetrics.FromString,
          response_serializer=k8s__sim__pb2.Result.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'simRPC.simRPC', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
